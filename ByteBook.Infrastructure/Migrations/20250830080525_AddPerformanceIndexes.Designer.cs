// <auto-generated />
using System;
using ByteBook.Infrastructure.Persistence;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace ByteBook.Infrastructure.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20250830080525_AddPerformanceIndexes")]
    partial class AddPerformanceIndexes
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("ByteBook.Domain.Entities.Book", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("AuthorId")
                        .HasColumnType("integer");

                    b.Property<decimal>("AverageRating")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("decimal(3,2)")
                        .HasDefaultValue(0m);

                    b.Property<string>("Category")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("ContentUrl")
                        .HasMaxLength(1000)
                        .HasColumnType("character varying(1000)");

                    b.Property<string>("CoverImageUrl")
                        .HasMaxLength(1000)
                        .HasColumnType("character varying(1000)");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("NOW()");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(true);

                    b.Property<bool>("IsPublished")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(false);

                    b.Property<DateTime?>("PublishedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("ReviewCount")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValue(0);

                    b.Property<int>("Status")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValue(1);

                    b.Property<string>("Tags")
                        .HasMaxLength(1000)
                        .HasColumnType("character varying(1000)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.Property<int>("TotalPages")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValue(0);

                    b.Property<DateTime>("UpdatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("NOW()");

                    b.HasKey("Id");

                    b.HasIndex("AuthorId")
                        .HasDatabaseName("IX_Books_AuthorId");

                    b.HasIndex("AverageRating")
                        .HasDatabaseName("IX_Books_AverageRating");

                    b.HasIndex("Category")
                        .HasDatabaseName("IX_Books_Category");

                    b.HasIndex("CreatedAt")
                        .HasDatabaseName("IX_Books_CreatedAt");

                    b.HasIndex("IsActive")
                        .HasDatabaseName("IX_Books_IsActive");

                    b.HasIndex("IsPublished")
                        .HasDatabaseName("IX_Books_IsPublished");

                    b.HasIndex("PublishedAt")
                        .HasDatabaseName("IX_Books_PublishedAt");

                    b.HasIndex("ReviewCount")
                        .HasDatabaseName("IX_Books_ReviewCount");

                    b.HasIndex("Status")
                        .HasDatabaseName("IX_Books_Status");

                    b.HasIndex("Title", "AuthorId")
                        .HasDatabaseName("IX_Books_Title_AuthorId");

                    b.ToTable("Books", (string)null);
                });

            modelBuilder.Entity("ByteBook.Domain.Entities.Payment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("BookId")
                        .HasColumnType("integer");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("NOW()");

                    b.Property<string>("ExternalTransactionId")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<string>("FailureReason")
                        .HasMaxLength(1000)
                        .HasColumnType("character varying(1000)");

                    b.Property<int>("PaymentType")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("ProcessedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("Provider")
                        .HasColumnType("integer");

                    b.Property<int?>("ReadingSessionId")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("RefundedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("Status")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValue(1);

                    b.Property<DateTime>("UpdatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("NOW()");

                    b.Property<int>("UserId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("BookId")
                        .HasDatabaseName("IX_Payments_BookId");

                    b.HasIndex("CreatedAt")
                        .HasDatabaseName("IX_Payments_CreatedAt");

                    b.HasIndex("ExternalTransactionId")
                        .HasDatabaseName("IX_Payments_ExternalTransactionId");

                    b.HasIndex("ProcessedAt")
                        .HasDatabaseName("IX_Payments_ProcessedAt");

                    b.HasIndex("Provider")
                        .HasDatabaseName("IX_Payments_Provider");

                    b.HasIndex("ReadingSessionId")
                        .HasDatabaseName("IX_Payments_ReadingSessionId");

                    b.HasIndex("Status")
                        .HasDatabaseName("IX_Payments_Status");

                    b.HasIndex("UserId")
                        .HasDatabaseName("IX_Payments_UserId");

                    b.HasIndex("Status", "ProcessedAt")
                        .HasDatabaseName("IX_Payments_Status_ProcessedAt");

                    b.HasIndex("UserId", "BookId")
                        .HasDatabaseName("IX_Payments_UserId_BookId");

                    b.ToTable("Payments", (string)null);
                });

            modelBuilder.Entity("ByteBook.Domain.Entities.Reading", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("BookId")
                        .HasColumnType("integer");

                    b.Property<int?>("ChargeType")
                        .HasColumnType("integer");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("NOW()");

                    b.Property<DateTime?>("EndTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("IsCompleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(false);

                    b.Property<int>("LastPageRead")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValue(0);

                    b.Property<int>("PagesRead")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValue(0);

                    b.Property<DateTime>("StartTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("Status")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValue(1);

                    b.Property<int>("TimeSpentMinutes")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValue(0);

                    b.Property<DateTime>("UpdatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("NOW()");

                    b.Property<int>("UserId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("BookId")
                        .HasDatabaseName("IX_Readings_BookId");

                    b.HasIndex("EndTime")
                        .HasDatabaseName("IX_Readings_EndTime");

                    b.HasIndex("IsCompleted")
                        .HasDatabaseName("IX_Readings_IsCompleted");

                    b.HasIndex("StartTime")
                        .HasDatabaseName("IX_Readings_StartTime");

                    b.HasIndex("Status")
                        .HasDatabaseName("IX_Readings_Status");

                    b.HasIndex("UserId")
                        .HasDatabaseName("IX_Readings_UserId");

                    b.HasIndex("UserId", "BookId")
                        .HasDatabaseName("IX_Readings_UserId_BookId");

                    b.HasIndex("UserId", "StartTime")
                        .HasDatabaseName("IX_Readings_UserId_StartTime");

                    b.ToTable("Readings", (string)null);
                });

            modelBuilder.Entity("ByteBook.Domain.Entities.Referral", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime?>("CommissionPaidAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<decimal>("CommissionRate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("decimal(5,4)")
                        .HasDefaultValue(0.10m);

                    b.Property<DateTime?>("ConvertedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("NOW()");

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(true);

                    b.Property<string>("ReferralCode")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<int>("ReferredUserId")
                        .HasColumnType("integer");

                    b.Property<int>("ReferrerId")
                        .HasColumnType("integer");

                    b.Property<int>("Status")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValue(1);

                    b.Property<int?>("TriggerPaymentId")
                        .HasColumnType("integer");

                    b.Property<int>("Type")
                        .HasColumnType("integer");

                    b.Property<DateTime>("UpdatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("NOW()");

                    b.HasKey("Id");

                    b.HasIndex("ConvertedAt")
                        .HasDatabaseName("IX_Referrals_ConvertedAt");

                    b.HasIndex("IsActive")
                        .HasDatabaseName("IX_Referrals_IsActive");

                    b.HasIndex("ReferralCode")
                        .IsUnique()
                        .HasDatabaseName("IX_Referrals_ReferralCode");

                    b.HasIndex("ReferredUserId")
                        .HasDatabaseName("IX_Referrals_ReferredUserId");

                    b.HasIndex("ReferrerId")
                        .HasDatabaseName("IX_Referrals_ReferrerId");

                    b.HasIndex("Status")
                        .HasDatabaseName("IX_Referrals_Status");

                    b.HasIndex("TriggerPaymentId")
                        .HasDatabaseName("IX_Referrals_TriggerPaymentId");

                    b.HasIndex("Type")
                        .HasDatabaseName("IX_Referrals_Type");

                    b.ToTable("Referrals", (string)null);
                });

            modelBuilder.Entity("ByteBook.Domain.Entities.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("NOW()");

                    b.Property<string>("EmailVerificationToken")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<DateTime?>("EmailVerifiedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(true);

                    b.Property<bool>("IsEmailVerified")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(false);

                    b.Property<DateTime>("LastLoginAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<string>("ResetPasswordToken")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<DateTime?>("ResetPasswordTokenExpiry")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("Role")
                        .HasColumnType("integer");

                    b.Property<DateTime>("UpdatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("NOW()");

                    b.HasKey("Id");

                    b.HasIndex("CreatedAt")
                        .HasDatabaseName("IX_Users_CreatedAt");

                    b.HasIndex("EmailVerificationToken")
                        .HasDatabaseName("IX_Users_EmailVerificationToken");

                    b.HasIndex("IsActive")
                        .HasDatabaseName("IX_Users_IsActive");

                    b.HasIndex("LastLoginAt")
                        .HasDatabaseName("IX_Users_LastLoginAt");

                    b.HasIndex("ResetPasswordToken")
                        .HasDatabaseName("IX_Users_ResetPasswordToken");

                    b.HasIndex("Role")
                        .HasDatabaseName("IX_Users_Role");

                    b.ToTable("Users", (string)null);
                });

            modelBuilder.Entity("ByteBook.Domain.Entities.Book", b =>
                {
                    b.HasOne("ByteBook.Domain.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("AuthorId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.OwnsOne("ByteBook.Domain.ValueObjects.Money", "PricePerHour", b1 =>
                        {
                            b1.Property<int>("BookId")
                                .HasColumnType("integer");

                            b1.Property<decimal>("Amount")
                                .HasColumnType("decimal(10,2)")
                                .HasColumnName("PricePerHourAmount");

                            b1.Property<string>("Currency")
                                .IsRequired()
                                .ValueGeneratedOnAdd()
                                .HasMaxLength(3)
                                .HasColumnType("character varying(3)")
                                .HasDefaultValue("USD")
                                .HasColumnName("PricePerHourCurrency");

                            b1.HasKey("BookId");

                            b1.ToTable("Books");

                            b1.WithOwner()
                                .HasForeignKey("BookId");
                        });

                    b.OwnsOne("ByteBook.Domain.ValueObjects.Money", "PricePerPage", b1 =>
                        {
                            b1.Property<int>("BookId")
                                .HasColumnType("integer");

                            b1.Property<decimal>("Amount")
                                .HasColumnType("decimal(10,4)")
                                .HasColumnName("PricePerPageAmount");

                            b1.Property<string>("Currency")
                                .IsRequired()
                                .ValueGeneratedOnAdd()
                                .HasMaxLength(3)
                                .HasColumnType("character varying(3)")
                                .HasDefaultValue("USD")
                                .HasColumnName("PricePerPageCurrency");

                            b1.HasKey("BookId");

                            b1.ToTable("Books");

                            b1.WithOwner()
                                .HasForeignKey("BookId");
                        });

                    b.Navigation("PricePerHour");

                    b.Navigation("PricePerPage");
                });

            modelBuilder.Entity("ByteBook.Domain.Entities.Payment", b =>
                {
                    b.HasOne("ByteBook.Domain.Entities.Book", null)
                        .WithMany()
                        .HasForeignKey("BookId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("ByteBook.Domain.Entities.Reading", null)
                        .WithMany()
                        .HasForeignKey("ReadingSessionId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("ByteBook.Domain.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.OwnsOne("ByteBook.Domain.ValueObjects.Money", "Amount", b1 =>
                        {
                            b1.Property<int>("PaymentId")
                                .HasColumnType("integer");

                            b1.Property<decimal>("Amount")
                                .HasColumnType("decimal(10,2)")
                                .HasColumnName("Amount");

                            b1.Property<string>("Currency")
                                .IsRequired()
                                .ValueGeneratedOnAdd()
                                .HasMaxLength(3)
                                .HasColumnType("character varying(3)")
                                .HasDefaultValue("USD")
                                .HasColumnName("Currency");

                            b1.HasKey("PaymentId");

                            b1.ToTable("Payments");

                            b1.WithOwner()
                                .HasForeignKey("PaymentId");
                        });

                    b.OwnsOne("ByteBook.Domain.ValueObjects.Money", "RefundedAmount", b1 =>
                        {
                            b1.Property<int>("PaymentId")
                                .HasColumnType("integer");

                            b1.Property<decimal>("Amount")
                                .HasColumnType("decimal(10,2)")
                                .HasColumnName("RefundedAmount");

                            b1.Property<string>("Currency")
                                .IsRequired()
                                .ValueGeneratedOnAdd()
                                .HasMaxLength(3)
                                .HasColumnType("character varying(3)")
                                .HasDefaultValue("USD")
                                .HasColumnName("RefundedCurrency");

                            b1.HasKey("PaymentId");

                            b1.ToTable("Payments");

                            b1.WithOwner()
                                .HasForeignKey("PaymentId");
                        });

                    b.Navigation("Amount")
                        .IsRequired();

                    b.Navigation("RefundedAmount");
                });

            modelBuilder.Entity("ByteBook.Domain.Entities.Reading", b =>
                {
                    b.HasOne("ByteBook.Domain.Entities.Book", null)
                        .WithMany()
                        .HasForeignKey("BookId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("ByteBook.Domain.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.OwnsOne("ByteBook.Domain.ValueObjects.Money", "ChargedAmount", b1 =>
                        {
                            b1.Property<int>("ReadingId")
                                .HasColumnType("integer");

                            b1.Property<decimal>("Amount")
                                .HasColumnType("decimal(10,2)")
                                .HasColumnName("ChargedAmount");

                            b1.Property<string>("Currency")
                                .IsRequired()
                                .ValueGeneratedOnAdd()
                                .HasMaxLength(3)
                                .HasColumnType("character varying(3)")
                                .HasDefaultValue("USD")
                                .HasColumnName("ChargedCurrency");

                            b1.HasKey("ReadingId");

                            b1.ToTable("Readings");

                            b1.WithOwner()
                                .HasForeignKey("ReadingId");
                        });

                    b.Navigation("ChargedAmount");
                });

            modelBuilder.Entity("ByteBook.Domain.Entities.Referral", b =>
                {
                    b.HasOne("ByteBook.Domain.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("ReferredUserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("ByteBook.Domain.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("ReferrerId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("ByteBook.Domain.Entities.Payment", null)
                        .WithMany()
                        .HasForeignKey("TriggerPaymentId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.OwnsOne("ByteBook.Domain.ValueObjects.Money", "CommissionEarned", b1 =>
                        {
                            b1.Property<int>("ReferralId")
                                .HasColumnType("integer");

                            b1.Property<decimal>("Amount")
                                .HasColumnType("decimal(10,2)")
                                .HasColumnName("CommissionEarnedAmount");

                            b1.Property<string>("Currency")
                                .IsRequired()
                                .ValueGeneratedOnAdd()
                                .HasMaxLength(3)
                                .HasColumnType("character varying(3)")
                                .HasDefaultValue("USD")
                                .HasColumnName("CommissionEarnedCurrency");

                            b1.HasKey("ReferralId");

                            b1.ToTable("Referrals");

                            b1.WithOwner()
                                .HasForeignKey("ReferralId");
                        });

                    b.OwnsOne("ByteBook.Domain.ValueObjects.Money", "TriggerAmount", b1 =>
                        {
                            b1.Property<int>("ReferralId")
                                .HasColumnType("integer");

                            b1.Property<decimal>("Amount")
                                .HasColumnType("decimal(10,2)")
                                .HasColumnName("TriggerAmount");

                            b1.Property<string>("Currency")
                                .IsRequired()
                                .ValueGeneratedOnAdd()
                                .HasMaxLength(3)
                                .HasColumnType("character varying(3)")
                                .HasDefaultValue("USD")
                                .HasColumnName("TriggerCurrency");

                            b1.HasKey("ReferralId");

                            b1.ToTable("Referrals");

                            b1.WithOwner()
                                .HasForeignKey("ReferralId");
                        });

                    b.Navigation("CommissionEarned");

                    b.Navigation("TriggerAmount");
                });

            modelBuilder.Entity("ByteBook.Domain.Entities.User", b =>
                {
                    b.OwnsOne("ByteBook.Domain.ValueObjects.Email", "Email", b1 =>
                        {
                            b1.Property<int>("UserId")
                                .HasColumnType("integer");

                            b1.Property<string>("Value")
                                .IsRequired()
                                .HasMaxLength(255)
                                .HasColumnType("character varying(255)")
                                .HasColumnName("Email");

                            b1.HasKey("UserId");

                            b1.HasIndex("Value")
                                .IsUnique()
                                .HasDatabaseName("IX_Users_Email");

                            b1.ToTable("Users");

                            b1.WithOwner()
                                .HasForeignKey("UserId");
                        });

                    b.OwnsOne("ByteBook.Domain.ValueObjects.UserProfile", "Profile", b1 =>
                        {
                            b1.Property<int>("UserId")
                                .HasColumnType("integer");

                            b1.Property<string>("AvatarUrl")
                                .HasMaxLength(1000)
                                .HasColumnType("character varying(1000)")
                                .HasColumnName("ProfileAvatarUrl");

                            b1.Property<string>("Bio")
                                .HasMaxLength(1000)
                                .HasColumnType("character varying(1000)")
                                .HasColumnName("ProfileBio");

                            b1.Property<string>("Interests")
                                .IsRequired()
                                .HasColumnType("text")
                                .HasColumnName("ProfileInterests");

                            b1.Property<string>("LinkedInProfile")
                                .HasMaxLength(500)
                                .HasColumnType("character varying(500)")
                                .HasColumnName("ProfileLinkedInProfile");

                            b1.Property<string>("Location")
                                .HasMaxLength(200)
                                .HasColumnType("character varying(200)")
                                .HasColumnName("ProfileLocation");

                            b1.Property<string>("TwitterHandle")
                                .HasMaxLength(100)
                                .HasColumnType("character varying(100)")
                                .HasColumnName("ProfileTwitterHandle");

                            b1.Property<string>("Website")
                                .HasMaxLength(500)
                                .HasColumnType("character varying(500)")
                                .HasColumnName("ProfileWebsite");

                            b1.HasKey("UserId");

                            b1.ToTable("Users");

                            b1.WithOwner()
                                .HasForeignKey("UserId");
                        });

                    b.Navigation("Email")
                        .IsRequired();

                    b.Navigation("Profile")
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
